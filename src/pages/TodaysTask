import React, { useEffect, useMemo, useRef, useState } from "react";
import { RefreshCcw, ExternalLink } from "lucide-react";

// uid を先に定義して利用可能にする
function uid() {
  if (typeof crypto !== "undefined" && crypto.randomUUID) return crypto.randomUUID();
  return `id_${Date.now().toString(36)}_${Math.random().toString(36).slice(2, 8)}`;
}

/**
 * DailyTaskList (UIリセット＋外部リンクアイコン付き)
 * - localStorage("tasks") を読み込み、今日の日付のものだけ表示
 * - リセットボタンを押したらUI上を空にする（ストレージは残す）
 * - url が設定されたタスクには外部リンクアイコンを表示
 * - デフォルトは空（ユーザー操作で「会議」「メール」を追加可能）
 */
export default function DailyTaskList() {
  const STORAGE_KEY = "tasks";
  const [tasks, setTasks] = useState([]);
  const [hideUI, setHideUI] = useState(false);
  const seededRef = useRef(false);

  // 今日 (YYYY-MM-DD)
  const todayStr = useMemo(() => {
    const d = new Date();
    const yyyy = d.getFullYear();
    const mm = String(d.getMonth() + 1).padStart(2, "0");
    const dd = String(d.getDate()).padStart(2, "0");
    return `${yyyy}-${mm}-${dd}`;
  }, []);

  // 初期ロード（localStorageに保存されていれば読み込む。デフォルトは空）
  useEffect(() => {
    try {
      const raw = localStorage.getItem(STORAGE_KEY);
      if (raw) {
        setTasks(JSON.parse(raw));
      } else if (!seededRef.current) {
        localStorage.setItem(STORAGE_KEY, JSON.stringify([]));
        seededRef.current = true;
      }
    } catch {}
  }, [todayStr]);

  // 今日のタスクを取得
  const todays = useMemo(() => {
    if (hideUI) return []; // リセット後はUI空にする
    return tasks.filter((t) => t.date === todayStr);
  }, [tasks, todayStr, hideUI]);

  // UIリセット処理（ストレージは消さない）
  const resetTasks = () => {
    setHideUI(true);
  };

  // 一時的に「会議」「メール」を本日分として追加
  const addTempToday = () => {
    const demo = [
      { id: uid(), title: "会議", date: todayStr, done: false, url: "https://example.com/meeting" },
      { id: uid(), title: "メール", date: todayStr, done: false, url: "https://mail.google.com" }
    ];
    setTasks(demo);
    setHideUI(false);
    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(demo));
      document.dispatchEvent(new CustomEvent("tasks:updated"));
    } catch {}
  };

  // チェック切り替え
  const toggleDone = (id) => {
    const next = tasks.map((t) => (t.id === id ? { ...t, done: !t.done } : t));
    setTasks(next);
    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(next));
      document.dispatchEvent(new CustomEvent("tasks:updated"));
    } catch {}
  };

  return (
    <div className="w-[300px] min-h-[100px] border border-gray-400 rounded-md p-2 bg-white">
      {/* ヘッダー（タイトル＋リセットボタン） */}
      <div className="flex items-center justify-between mb-1">
        <h3 className="text-[15px] font-semibold leading-none">本日のタスク</h3>
        <div className="flex items-center gap-1">
          {todays.length === 0 && !hideUI && (
            <button
              onClick={addTempToday}
              className="px-2 py-0.5 text-xs border rounded hover:bg-gray-50"
              title="サンプル（会議・メール）を追加"
            >
              デモ追加
            </button>
          )}
          <button
            onClick={resetTasks}
            className="p-0.5 rounded hover:bg-gray-100"
            aria-label="リセット"
            title="リセット"
          >
            <RefreshCcw className="w-4 h-4" />
          </button>
        </div>
      </div>

      {/* タスクがリセットされたら何も表示しない */}
      {todays.length > 0 && (
        <ul className="space-y-1 mt-1">
          {todays.map((t) => (
            <li key={t.id} className="flex items-center justify-between text-[14px]">
              <div className="flex items-center gap-1">
                <input type="checkbox" checked={!!t.done} onChange={() => toggleDone(t.id)} />
                <span>{t.title}</span>
              </div>
              {t.url && (
                <a
                  href={t.url}
                  target="_blank"
                  rel="noreferrer"
                  className="p-0.5 rounded opacity-70 hover:opacity-100 hover:bg-gray-100"
                  aria-label="関連リンクを開く"
                  title="関連リンクを開く"
                >
                  <ExternalLink className="w-4 h-4" />
                </a>
              )}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

// 簡単なテストケース（uidの動作確認）
console.assert(typeof uid() === "string" && uid().length > 5, "uid() should return a non-empty string");

